<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-bzwu-tls-client-keyshare-00">

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>

  <front>

    <title abbrev="TLS Client Keyshare Extension">
      Transport Layer Security (TLS) Client Keyshare Extension</title>

    <author fullname="Bingzheng Wu" initials="BZ." surname="Wu">
      <organization>Alibaba Inc.</organization>
      <address>
        <email>bingzheng.wbz@alibaba-inc.com</email>
      </address>
    </author>

    <date month="April" year="2015" />

    <area>Security</area>

    <workgroup>TLS</workgroup>

    <keyword>SSL handshake optimize</keyword>

    <abstract>
      <t>This document defines an extension that allows a TLS client
      to carry a Diffie-Hellman (DH) keyshare in ClientHello message,
      replacing the ClientKeyExchange message in the 2nd round-trip,
      to reduce the full handshake latency to one network round-trip time (RTT).</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>A full TLS handshake as specified in TLS <xref target="TLSv1.2"/> requires 2-RTT,
      mostly because of the ClientKeyExchange message in the second round-trip, which is
      used for the key exchange. 
      TLS 1.3 will offer a 1-RTT mode by sending DH keyshare immediately
      after the ClientHello in the first round-trip, called ClientKeyShare message.
      However, it will take a long time to finalize the draft and deploy TLS 1.3.</t>

      <t>This document defines a TLS extension that allows a client using TLS 1.2
      to carry DH keyshares in the ClientHello message with the 1st round-trip.
      This leads to a latency reduction of of one round-trip. Elliptic Curve (EC) 
      and Finite Field (FF) keyshare types are supported.</t>

      <t>The full handshake works as follows with the keyshare extension.
      A client takes this extension with the DH keyshare in the ClientHello message.
      A server receiving this extension echos it in the ServerHello message to indicate support
      within this session and sends a ServerKeyExchange to complete the key exchange
      (with the DH keyshare in client's extension).
      Since there is no ClientKeyExchange to wait for, the server sends no ServerHelloDone,
      but ChangeCipherSpec and Finished message immediately, similar to an abbreviated handshake flow.</t>

      <t>The message flow of a normal full handshake is illustrated in Figure 1; and the message
      flow of handshake using this extension is illustrated in Figure 2.</t>

      <figure><artwork align="left"><![CDATA[
      Client                                               Server

      ClientHello                  -------->
                                                      ServerHello
                                                     Certificate*
                                               ServerKeyExchange*
                                              CertificateRequest*
                                   <--------      ServerHelloDone
      Certificate*
      ClientKeyExchange
      CertificateVerify*
      [ChangeCipherSpec]
      Finished                     -------->
                                               [ChangeCipherSpec]
                                   <--------             Finished
      Application Data             <------->     Application Data

      Figure 1 [TLSv1.2].  Message flow of normal full handshake

      ]]></artwork></figure>

      <figure><artwork align="left"><![CDATA[
      Client                                               Server

      ClientHello                  -------->
      {with client_keyshare extension}
                                                      ServerHello
                                                     Certificate*
                                                ServerKeyExchange
                                               [ChangeCipherSpec]
                                   <--------             Finished
      [ChangeCipherSpec]
      Finished                     -------->
      Application Data             <------->     Application Data

              Figure 2 Message flow using this extension

      ]]></artwork></figure>

      <t>This works only if client and server
      both support the extension. For example, if a server which does not support this extension
      receives a ClientHello message with this extension, the server MUST ignore it.</t>

      <t>This extension only works if the negotiated key exchange algorithm is 
      Ephemeral Diffie-Hellman (FFDH or ECDH).
      Obviously, the client has to send a ClientKeyExchange message after getting the server's
      certificate if it is using RSA as key exchange. Thus it can not benefit from this
      extension. Although the client may get server's certificate before the
      handshake by the Cached Infomation extension (work in progress), we
      do not support RSA key exchange for simplicity. TLS 1.3 will remove support for RSA
      key-exchange entirely and RSA as key-exchange is discouraged <xref target="TLSBCP"/> </t>

      <t>Since the client does not know which DH types and parameters the server supports,
      it MAY takes more than one DH keyshare in this extension.
      The server picks one DH keyshare of the same type with the key exchange
      algorithm (FF or ECC) and acceptable parameters, used for the key exchange.
      If there is no suitable keyshare, the server MUST ignore this extension. </t>

      <t>This extension does not work if server requests a client's certificate,
      which also needs 1-RTT. </t>

      <t>Finally, this extension only works in when full handshake are used,  abbreviated
      handshake are not supported.</t>

    </section>


    <section title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref target="KEYWORDS"/>.</t>
    </section>


    <section title="Client Keyshare Extension">
      <t>This document defines a new extension type (client_keyshare(TBD)), which
      is used in the ClientHello and ServerHello messages.
      The extension type is specified as follows.  </t>

      <figure><artwork><![CDATA[
         enum {
              client_keyshare(TBD), (65535)
         } ExtensionType;
      ]]></artwork></figure>

      <section title="Extension-data Specification">

     <t>The extension_data field of this extension, when included in the
     ClientHello, MUST contain the ClientKeyshare structure, which 
     offers one or more ClientKeyShareOffer values, each representing
     a single set of DH key agreement parameters.  The shares for each
     ClientKeyShareOffer MUST be generated independently. Clients MUST NOT
     offer multiple ClientKeyShareOffers for the same parameters.
     The shares SHOULD keep the same order as with elliptic_curves
     extension <xref target="TLSv1.2"/>, to indicate client's preference.</t>

     <t>Only NamedCurves <xref target="TLSECC"/> (for EC type) and NegotiatedParameters
     (work in progress) (for FF type) are supported.
     While generic parameters are not supported for safety and simplicity.</t>

      <figure><artwork><![CDATA[
         struct {
              ClientKeyShareOffer offers<0..2^16-1>;
         } ClientKeyShare;

         struct {
              NamedGroup    group_id;
              select (typeof(group_id)) {
                  case FF:  ClientDiffieHellmanPublic;
                  case EC:  ECPoint;
              } public_key;
         } ClientKeyShareOffer;
      ]]></artwork></figure>

       <t><list style="hanging">
         <t hangText='group_id'><vspace blankLines='0'/>
         Specifies the DH parameters associated with the public key.
         NamedGroup is extended from NamedCurve <xref target="TLSECC"/>
         by Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for TLS
         (work in progress) for supporting finite-field-based DH.</t>
       </list></t>

       <t><list style="hanging">
         <t hangText='public_key'><vspace blankLines='0'/>
         The ephemeral DH public key.
         It's in ClientDiffieHellmanPublic format <xref target="TLSv1.2"/> for FF type,
         or in ECPoint format <xref target="TLSECC"/> for EC type.</t>
       </list></t>

     <t>Because the key exchange is made by the ClientKeyshare extension and ServerKeyExchange message,
     it's not necessary to parse values in extension_data if included in the ServerHello message.
     The server just echoes the extension with an empty extension_data to indicate support in the current
     this session. </t>

      </section>


      <section title="Message Flow with This Extension">

     <t>In the TLS handshake, the client adds this extension in the ClientHello message, with one or more DH keyshares.</t>

     <t>When receiving a handshake, a server enables this extension if:
       <list style="symbols">
       <t>the extension is present in ClientHello;</t>
       <t>the negotiated key-exchange algorithm is DH-like;</t>
       <t>it has at least one acceptable ClientKeyShareOffer;</t>
       <t>the client's certificate is not required;</t>
       <t>and it's not an abbreviated handshake.</t></list>
     </t>

     <t>If enabled, the server then:
       <list style="symbols">
       <t>adds this extension in the ServerHello message with an empty extension_data, to indicate support for this extension;</t>
       <t>picks one acceptable ClientKeyShareOffer for the key exchange,
          generates an DH keyshare with the same parameters as the chosen ClientKeyShareOffer,
          sends it in the ServerKeyExchange, and completes the key exchange with these values;</t>
       <t>it does not wait for ClientKeyExchange, and does not send a ServerHelloDone message; instead the server 
        sends ChangeCipherSpec and Finished messages immediately, like with an abbreviated handshake. </t></list>
     </t>

     <t>The client enables this extension if the server echoes this extension in the ServerHello message.</t>

     <t>If enabled, the client then:
       <list style="symbols">
       <t>picks the ClientKeyShareOffer containing the same parameters as with ServerKeyExchange.
          If there is no ClientKeyShareOffer, the client MUST abort the handshake with an illegal_parameter fatal alert;</t>
       <t>does not send ClientKeyExchange;</t>
       <t>and expects no ServerHelloDone message but ChangeCipherSpec and Finished messages after the ServerKeyExchange,
          like with an abbreviated handshake. </t></list>
     </t>
      </section>

    </section>


    <section title="Interaction">

    <t>Server sends ChangeCipherSpec and Finished messages after the ServerKeyExchange, if this
    extension is enabled (Figure 2). However there may be messages between the
    ServerKeyExchange and ChangeCipherSpec, e.g. NewSessionTicket, if the Session
    Ticket extension is used <xref target="TICKET"/>.</t>

    <t>With the Session Hash extension (work in progess) "handshake_messages"
    refer to all handshake messages up to and including the ClientKeyExchange message.
    There is no ClientKeyExchange if this client_keyshare extension is enabled.
    The "handshake_messages" should be changed to refer to all handshake messages
    up to and including the ServerKeyExchange message, without breaking the Session Hash extension. </t>

    <t>Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for TLS
    where the FF NegotiatedParameters are defined (works in progress) only supports
    FFDH-ephemeral but not FFDH-static. This extension does as well too. </t>
    </section>


    <section title="Security Considerations">
    <t>This extension brings client's DH keyshare forward, from the ClientKeyExchange
    message in the 2nd round-trip, to ClientHello message in the 1st round-trip.
    The TLS version 1.3 (works in progress) also works like this. </t>
    </section>


    <section title="IANA Considerations">
    <t>IANA is requested to add an entry to the existing TLS ExtensionType
   registry, defined in TLS <xref target="TLSv1.2"/>, for client_keyshare(TBD) defined
   in this document.  </t>
    </section>


  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

   <references>
    <reference anchor='TLSv1.2'>
      <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
      <author initials='T.' surname='Dierks' fullname='Tim Dierks' />
      <author initials='E.' surname='Rescorla' fullname='Eric Rescorla' />
      <date year='2008' month='August' />
      </front>
      <seriesInfo name='RFC' value='5246' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc5246.txt' />
    </reference>

    <reference anchor='KEYWORDS'>
      <front>
      <title>Key words for use in RFCs to Indicate Requirement Levels</title>
      <author initials='S.' surname='Bradner' fullname='Scott Bradner' />
      <date year='1997' month='March' />
      </front>
      <seriesInfo name='RFC' value='2119' />
      <format type='TXT' target='https://www.ietf.org/rfc/rfc2119.txt' />
    </reference>

    <reference anchor='TLSECC'>
      <front>
      <title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
      <author initials='S.' surname='Blake-Wilson' fullname='Simon Blake-Wilson' />
      <author initials='N.' surname='Bolyard' fullname='Nelson Bolyard' />
      <author initials='V.' surname='Gupta' fullname='Vipul Gupta' />
      <author initials='C.' surname='Hawk' fullname='Chris Hawk' />
      <author initials='B.' surname='Moeller' fullname='Bodo Moeller' />
      <date year='2006' month='May' />
      </front>
      <seriesInfo name='RFC' value='4492' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc4492.txt' />
    </reference>

    <reference anchor='TICKET'>
      <front>
      <title>Transport Layer Security (TLS) Session Resumption without Server-Side State</title>
      <author initials='J.' surname='Salowey' fullname='Joseph Salowey' />
      <author initials='H.' surname='Zhou' fullname='Hao Zhou' />
      <author initials='P.' surname='Eronen' fullname='Pasi Eronen' />
      <author initials='H.' surname='Tschofenig' fullname='Hannes Tschofenig' />
      <date year='2008' month='January' />
      </front>
      <seriesInfo name='RFC' value='5077' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc5077.txt' />
    </reference>

    <reference anchor='TLSBCP'>
      <front>
      <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
      <author initials='Y.' surname='Sheffer' fullname='Yaron Sheffer' />
      <author initials='R.' surname='Holz' fullname='Ralph Holz' />
      <author initials='P.' surname='Saint-Andre' fullname='Peter Saint-Andre' />
      <date year='2015' month='May' />
      </front>
      <seriesInfo name='RFC' value='7525' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc7525.txt' />
    </reference>
   </references>

  </back>
</rfc>
