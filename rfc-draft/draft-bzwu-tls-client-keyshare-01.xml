<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-bzwu-tls-client-keyshare-01">

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>

  <front>

    <title abbrev="TLS Client Keyshare Extension">
      Transport Layer Security (TLS) Client Keyshare Extension</title>

    <author fullname="Bingzheng Wu" initials="BZ." surname="Wu">
      <organization>Alibaba Inc.</organization>
      <address>
        <email>bingzheng.wbz@alibaba-inc.com</email>
      </address>
    </author>

    <date month="May" year="2015" />

    <area>Security</area>

    <workgroup>TLS</workgroup>

    <keyword>SSL handshake optimize</keyword>

    <abstract>
      <t>This document defines an extension that allows a TLS client
      to carry Diffie-Hellman (DH) keyshares in ClientHello message,
      replacing the ClientKeyExchange message in the second round-trip,
      to reduce the full handshake latency to one network round-trip time (RTT).</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>A full TLS handshake as specified in <xref target="TLSv1.2"/> requires 2-RTT,
      mostly because of the ClientKeyExchange message in the second round-trip, which is
      used for the key exchange. 
      TLS 1.3, which works in progress, will offer a 1-RTT mode by sending DH keyshare immediately
      after the ClientHello in the first round-trip, called ClientKeyShare message.
      However, it will take a long time to finalize the draft and deploy TLS 1.3.</t>

      <t>This document defines a TLS extension that allows a client using TLS 1.2
      to carry DH keyshares in the ClientHello message with the first round-trip.
      The client and server complete key exchange by the keyshares and native
      ServerKeyExchange message, thus the ClientKeyExchange message is not necessary
      and could be omitted.
      This leads to a latency reduction of one round-trip. </t>

      <t>This extension is intended for TLS 1.2 only, but no previous versions <xref target="TLSBCP"/>.
      This extension only supports Ephemeral DH, but no static DH <xref target="TLSBCP"/>.
      This extension supports Elliptic Curve (EC) and Finite Field (FF) keyshare types.
      Only NamedCurves <xref target="TLSECC"/> (for EC type) and NegotiatedParameters
      (work in progress) (for FF type) are supported, while generic parameters are not
      supported for safety and simplicity.
      This extension dose not work if client certificates are involved, which needs the second round-trip too. </t>

    </section>



    <section title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119 <xref target="KEYWORDS"/>.</t>
    </section>


    <section title="Client Keyshare Extension">

      <section title="Extension Type">

      <t>This document defines a new extension type (client_keyshare(TBD)), which
      is used in the ClientHello and ServerHello messages.
      The extension type is specified as follows.  </t>

      <figure><artwork><![CDATA[
         enum {
              client_keyshare(TBD), (65535)
         } ExtensionType;
      ]]></artwork></figure>
      </section>

      <section title="Extension-data Specification">

     <t>The extension_data field of this extension, when included in the
     ClientHello message, MUST contain the ClientKeyshare structure, which 
     offers one or more ClientKeyShareOffer values, each representing
     a single set of DH key agreement parameters.  The shares for each
     ClientKeyShareOffer MUST be generated independently. Clients MUST NOT
     offer multiple ClientKeyShareOffers for the same parameters.
     The shares SHOULD keep the same order as with elliptic_curves
     extension <xref target="TLSv1.2"/>, to indicate client's preference.</t>

      <figure><artwork><![CDATA[
         struct {
              ClientKeyShareOffer offers<0..2^16-1>;
         } ClientKeyShare;

         struct {
              byte          type(3);
              NamedGroup    group_id;
              select (typeof(group_id)) {
                  case FF:  ClientDiffieHellmanPublic;
                  case EC:  ECPoint;
              } public_key;
         } ClientKeyShareOffer;
      ]]></artwork></figure>

       <t><list style="hanging">
         <t hangText='type'><vspace blankLines='0'/>
         Since only NamedCurves and NegotiatedParameters are supported in this extension,
         this byte exists only for compatibility with ECCurveType in ECParameters <xref target="TLSECC"/>,
         and its value MUST always be 3.</t>
       </list></t>

       <t><list style="hanging">
         <t hangText='group_id'><vspace blankLines='0'/>
         Specifies the DH parameters associated with the public key.
         NamedGroup is extended from NamedCurve <xref target="TLSECC"/>
         by Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for TLS
         (work in progress) to support finite-field-based DH.</t>
       </list></t>

       <t><list style="hanging">
         <t hangText='public_key'><vspace blankLines='0'/>
         The ephemeral DH public key.
         It's in ClientDiffieHellmanPublic format <xref target="TLSv1.2"/> for FF type,
         or in ECPoint format <xref target="TLSECC"/> for EC type.</t>
       </list></t>

     <t>Because the key exchange is made by the ClientKeyshare extension and ServerKeyExchange message,
     it's not necessary to parse values in extension_data if included in the ServerHello message.
     The server just echoes the extension with an empty extension_data to indicate support in the current
     this session. </t>

      </section>


      <section title="Message Flow with This Extension">

      <t>In brief, the full handshake works as follows with this extension.
      A client takes this extension with some DH keyshares in the ClientHello message.
      A server receiving this extension echoes it in the ServerHello message to indicate support
      within this session and sends a ServerKeyExchange to complete the key exchange
      (with the DH keyshare in client's extension).
      Since there is no ClientKeyExchange to wait for, the server sends no ServerHelloDone,
      but ChangeCipherSpec and Finished message immediately, similar to an abbreviated handshake flow.</t>

      <t>The message flow is illustrated in the this figure.</t>

      <figure><artwork align="left"><![CDATA[
      Client                                               Server

      ClientHello                  -------->
      {with client_keyshare extension}
                                                      ServerHello
                                                     Certificate*
                                                ServerKeyExchange
                                               [ChangeCipherSpec]
                                   <--------             Finished
      [ChangeCipherSpec]
      Finished                     -------->
      Application Data             <------->     Application Data
      ]]></artwork></figure>

      <t>This works only if client and server
      both support the extension. For example, if a server which does not support this extension
      receives a ClientHello message with this extension, the server MUST ignore it.</t>

      <t>This extension only works if the negotiated key exchange algorithm is 
      Ephemeral Diffie-Hellman (FFDHE or ECDHE).
      Obviously, the client has to send a ClientKeyExchange message after getting the server's
      certificate if it is using RSA as key exchange. Thus it can not benefit from this
      extension. Although the client may get server's certificate before the
      handshake by the Cached Infomation extension (work in progress), we
      do not support RSA key exchange for simplicity. TLS 1.3 will remove support for RSA
      key-exchange entirely and RSA as key-exchange is discouraged <xref target="TLSBCP"/> </t>

      <t>Since the client does not know which DH types and parameters the server supports,
      it MAY takes more than one DH keyshare in this extension.
      The server picks one DH keyshare of the same type as with the key exchange
      algorithm (FF or EC) and acceptable parameters, generates a DH keyshare with 
      the same parameters, sends it in ServerKeyExchange message, and completes the key
      exchange with these two keyshares.
      If there is no suitable keyshare in client's extension, the server MUST ignore this extension. </t>

      <t>A client enables this extension only if the server echoes this extension in
      the ServerHello message.
      The client picks the ClientKeyShareOffer containing the same parameters as with
      ServerKeyExchange. If there is no such ClientKeyShareOffer, the client MUST abort
      the handshake with an illegal_parameter fatal alert.</t>

      <t>If this extension is enabled, a server does not wait for the ClientKeyExchange,
      or send a ServerHelloDone message; instead it sends ChangeCipherSpec and Finished
      messages immediately, like with an abbreviated handshake. Accordingly a client dose
      not send ClientKeyExchange or wait for ServerHelloDone message. </t>

      <t>A server does not enable this extension if it requests client's certificate,
      which needs the second round-trip too. </t>

      <t>Finally, this extension only works in full handshake, while not in abbreviated
      handshake which does not need key exchange.</t>
      </section>

    </section>


    <section title="Interaction">

    <t>Server sends ChangeCipherSpec and Finished messages after the ServerKeyExchange, if this
    extension is enabled. However there may be messages between the
    ServerKeyExchange and ChangeCipherSpec, e.g. NewSessionTicket, if the Session
    Ticket extension is used <xref target="TICKET"/>.</t>

    <t>With the Session Hash extension (work in progess) "handshake_messages"
    refer to all handshake messages up to and including the ClientKeyExchange message.
    There is no ClientKeyExchange if this client_keyshare extension is enabled.
    The "handshake_messages" should be changed to refer to all handshake messages
    up to and including the ServerKeyExchange message, without breaking the Session Hash extension. </t>

    </section>


    <section title="Security Considerations">
    <t>This extension brings client's DH keyshare forward, from the ClientKeyExchange
    message in the second round-trip, to ClientHello message in the first round-trip.
    TLS 1.3 (works in progress) also works like this. So there should not be any security
    problem introduced.</t>
    </section>


    <section title="IANA Considerations">
    <t>IANA is requested to add an entry to the existing TLS ExtensionType
    registry, defined in TLS <xref target="TLSv1.2"/>, for client_keyshare(TBD) defined
    in this document.  </t>
    </section>


    <section title="Acknowledgements">
    <t>Thanks to Ilari Liusvaara and Aaron Zauner for their valuable comments and suggestions on this draft.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

   <references>
    <reference anchor='TLSv1.2'>
      <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
      <author initials='T.' surname='Dierks' fullname='Tim Dierks' />
      <author initials='E.' surname='Rescorla' fullname='Eric Rescorla' />
      <date year='2008' month='August' />
      </front>
      <seriesInfo name='RFC' value='5246' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc5246.txt' />
    </reference>

    <reference anchor='KEYWORDS'>
      <front>
      <title>Key words for use in RFCs to Indicate Requirement Levels</title>
      <author initials='S.' surname='Bradner' fullname='Scott Bradner' />
      <date year='1997' month='March' />
      </front>
      <seriesInfo name='RFC' value='2119' />
      <format type='TXT' target='https://www.ietf.org/rfc/rfc2119.txt' />
    </reference>

    <reference anchor='TLSECC'>
      <front>
      <title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
      <author initials='S.' surname='Blake-Wilson' fullname='Simon Blake-Wilson' />
      <author initials='N.' surname='Bolyard' fullname='Nelson Bolyard' />
      <author initials='V.' surname='Gupta' fullname='Vipul Gupta' />
      <author initials='C.' surname='Hawk' fullname='Chris Hawk' />
      <author initials='B.' surname='Moeller' fullname='Bodo Moeller' />
      <date year='2006' month='May' />
      </front>
      <seriesInfo name='RFC' value='4492' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc4492.txt' />
    </reference>

    <reference anchor='TICKET'>
      <front>
      <title>Transport Layer Security (TLS) Session Resumption without Server-Side State</title>
      <author initials='J.' surname='Salowey' fullname='Joseph Salowey' />
      <author initials='H.' surname='Zhou' fullname='Hao Zhou' />
      <author initials='P.' surname='Eronen' fullname='Pasi Eronen' />
      <author initials='H.' surname='Tschofenig' fullname='Hannes Tschofenig' />
      <date year='2008' month='January' />
      </front>
      <seriesInfo name='RFC' value='5077' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc5077.txt' />
    </reference>

    <reference anchor='TLSBCP'>
      <front>
      <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
      <author initials='Y.' surname='Sheffer' fullname='Yaron Sheffer' />
      <author initials='R.' surname='Holz' fullname='Ralph Holz' />
      <author initials='P.' surname='Saint-Andre' fullname='Peter Saint-Andre' />
      <date year='2015' month='May' />
      </front>
      <seriesInfo name='RFC' value='7525' />
      <format type='TXT' target='https://tools.ietf.org/rfc/rfc7525.txt' />
    </reference>
   </references>

  </back>
</rfc>
